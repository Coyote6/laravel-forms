<?php


namespace Coyote6\LaravelForms\Traits;


use Livewire\TemporaryUploadedFile;
use Livewire\WithFileUploads as WithLivewireFileUploads;


trait WithFileUploads {
	
	
	use WithLivewireFileUploads;
	
	//
	// Initiate the autogenerated properties for file fields
	//
	// @return void
	//
	public function initFileFields (string|array $names): void {
		
		// These have to match the suffixes that are in the File Field.
		$prevSuffix = 'PreviousUploads';
		$removedSuffix = 'Removed';
		$allSuffix = 'All';
		$tempAccessSuffix = 'TempAccessTimes';
		
		if (is_string ($names)) {
			$names = explode ('|', $names);
		}
		if (is_array ($names)) {
			foreach ($names as $name) {
				
				// Trim the property name.
				$property = trim ($name);
				
				// These have to match the suffixes that are in the File Field.
				$prevPropName = $property . $prevSuffix;
				$removedPropName = $property . $removedSuffix;
				$allPropName = $property . $allSuffix;
				$tempAccessPropName = $property . $tempAccessSuffix;
				
				// Make sure all fields are initiated.
				if (!property_exists ($this, $prevPropName)) {
					$this->$prevPropName = null;
				}
				if (!property_exists ($this, $removedPropName)) {
					$this->$removedPropName = null;
				}
				if (!property_exists ($this, $allPropName)) {
					$this->$allPropName = null;
				}
				if (!property_exists ($this, $tempAccessPropName)) {
					$this->$tempAccessPropName = null;
				}
				
			}
		}
		
	}
	
	//
	// @alias $this->initFileFields()
	// @return void
	//
	public function initFiles (string|array $names): void {
		$this->initFileFields ($names);
	}
	
	
	//
	// @alias $this->initFileFields()
	// @return void
	//
	public function initFile (string|array $names): void {
		$this->initFileFields ($names);
	}
	
	
	//
	// Remove the file from the previous and all files list and add it to the removed files list.
	//
	// @return void
	//
	public function removeFile (string $property, string $filenameHash): void {
	
		// Make sure all the needed properties are set.
		$this->initFile ($property);
		
		// These have to match the suffixes that are in the File Field.
		$prevSuffix = 'PreviousUploads';
		$removedSuffix = 'Removed';
		$allSuffix = 'All';
		
		// These have to match the suffixes that are in the File Field.
		$prevPropName = $property . $prevSuffix;
		$removedPropName = $property . $removedSuffix;
		$allPropName = $property . $allSuffix;
				
		if (is_array ($this->$prevPropName) && isset ($this->$prevPropName[$filenameHash])) {
			if (!isset ($this->$removedPropName[$filenameHash])) {
				$this->$removedPropName[$filenameHash] = $this->$prevPropName[$filenameHash];
			}
			unset ($this->$prevPropName[$filenameHash]);
		}

		if (is_array ($this->$allPropName) && isset ($this->$allPropName[$filenameHash])) {
			if (!isset ($this->$removedPropName[$filenameHash])) {
				$this->$removedPropName[$filenameHash] = $this->$allPropName[$filenameHash];
			}
			unset ($this->$allPropName[$filenameHash]);
		}

		if (is_array ($this->$property)) {
			foreach ($this->$property as $key => $prop) {
				if ($filenameHash == md5 ($prop->getFilename())) {
					unset ($this->$property[$key]);
					break;
				}
			}
		}
		else {
			$this->$property = null;
		}

	}
	
	
	public function isTempFile ($file) {
		if ($file instanceof TemporaryUploadedFile) {
			return true;
		}
		return false;
	}
	
	
/*
	protected function resetPropertyValue (string $property) {
		
		$tempPropName = $property . 'Temp';

		
		$previouslyUploaded = $this->$tempPropName;
		$newValue = [];
		
		if (is_array ($previouslyUploaded)) {
			foreach ($previouslyUploaded as $hash => $value) {
				
				// Reuse the object if it is already created.
				// Otherwise, rebuild it, or set the value for
				// non-objects.
				//
				if (is_object ($value['value'])) {
					$newValue[$hash] = $value['value'];
				}
				else {
					if ($value['type'] == 'object' && $value['model']) {
						$model = $value['model'];
						$newValue[$hash] = $model::find($value['model-id']);		
					}
					else if (
						($value['type'] == 'object' && $value['upload']) ||
						$value['type'] == 'string' || 
						$value['type'] == 'integer' || $value['type'] == 'double' || $value['type'] == 'float'
					) {
						$newValue[$hash] = $value['value'];
					}
				}
			}
		}
		
		$this->$property = $newValue;
			
	}
*/
	
    
}
